{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncThrowingChannel"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Element"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Failure"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Sendable","preciseIdentifier":"s:s8SendableP"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"AsyncThrowingChannel"},{"type":"text","text":" class is intended to be used as a communication types between tasks,"},{"type":"text","text":" "},{"type":"text","text":"particularly when one task produces values and another task consumes those values. The back"},{"type":"text","text":" "},{"type":"text","text":"pressure applied by "},{"type":"codeVoice","code":"send(_:)"},{"type":"text","text":" via suspension\/resume ensures that the production of values does"},{"type":"text","text":" "},{"type":"text","text":"not exceed the consumption of values from iteration. This method suspends after enqueuing the event"},{"type":"text","text":" "},{"type":"text","text":"and is resumed when the next call to "},{"type":"codeVoice","code":"next()"},{"type":"text","text":" on the "},{"type":"codeVoice","code":"Iterator"},{"type":"text","text":" is made, or when "},{"type":"codeVoice","code":"finish()"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"fail(_:)"},{"type":"text","text":" is called"},{"type":"text","text":" "},{"type":"text","text":"from another Task. As "},{"type":"codeVoice","code":"finish()"},{"type":"text","text":" and "},{"type":"codeVoice","code":"fail(_:)"},{"type":"text","text":" induce a terminal state, there is no need for a back pressure management."},{"type":"text","text":" "},{"type":"text","text":"Those functions do not suspend and will finish all the pending iterations."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/asyncalgorithms\/asyncthrowingchannel"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/org.swift.AsyncAlgorithms\/s8SendableP","doc:\/\/org.swift.AsyncAlgorithms\/Sci"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncThrowingChannel","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"An error-throwing channel for sending elements from on task to another with back pressure."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncThrowingChannel"}],"title":"AsyncThrowingChannel","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:15AsyncAlgorithms0A15ThrowingChannelC","modules":[{"name":"AsyncAlgorithms"}],"navigatorTitle":[{"kind":"identifier","text":"AsyncThrowingChannel"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms"]]},"topicSections":[{"title":"Structures","identifiers":["doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncThrowingChannel\/Iterator"]},{"title":"Initializers","identifiers":["doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncThrowingChannel\/init(_:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncThrowingChannel\/fail(_:)","doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncThrowingChannel\/finish()","doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncThrowingChannel\/makeAsyncIterator()","doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncThrowingChannel\/send(_:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncThrowingChannel\/AsyncSequence-Implementations","doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncThrowingChannel\/AsyncSequence-Implementations"],"generated":true}],"references":{"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/AsyncThrowingChannel/makeAsyncIterator()":{"role":"symbol","title":"makeAsyncIterator()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"makeAsyncIterator"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Iterator","preciseIdentifier":"s:15AsyncAlgorithms0A15ThrowingChannelC8IteratorV"}],"abstract":[],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncThrowingChannel\/makeAsyncIterator()","kind":"symbol","type":"topic","url":"\/documentation\/asyncalgorithms\/asyncthrowingchannel\/makeasynciterator()"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/AsyncThrowingChannel/Iterator":{"role":"symbol","title":"AsyncThrowingChannel.Iterator","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Iterator"}],"abstract":[{"type":"text","text":"The iterator for an "},{"type":"codeVoice","code":"AsyncThrowingChannel"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncThrowingChannel\/Iterator","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Iterator"}],"url":"\/documentation\/asyncalgorithms\/asyncthrowingchannel\/iterator"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/AsyncThrowingChannel":{"role":"symbol","title":"AsyncThrowingChannel","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncThrowingChannel"}],"abstract":[{"type":"text","text":"An error-throwing channel for sending elements from on task to another with back pressure."}],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncThrowingChannel","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AsyncThrowingChannel"}],"url":"\/documentation\/asyncalgorithms\/asyncthrowingchannel"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/AsyncThrowingChannel/AsyncSequence-Implementations":{"role":"collectionGroup","title":"AsyncSequence Implementations","abstract":[],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncThrowingChannel\/AsyncSequence-Implementations","kind":"article","type":"topic","url":"\/documentation\/asyncalgorithms\/asyncthrowingchannel\/asyncsequence-implementations"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms":{"role":"collection","title":"AsyncAlgorithms","abstract":[{"type":"strong","inlineContent":[{"type":"text","text":"Swift Async Algorithms"}]},{"type":"text","text":" is an open-source package of asynchronous sequence and advanced algorithms that involve concurrency, along with their related types."}],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms","kind":"symbol","type":"topic","url":"\/documentation\/asyncalgorithms"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/AsyncThrowingChannel/send(_:)":{"role":"symbol","title":"send(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:15AsyncAlgorithms0A15ThrowingChannelC7Elementxmfp"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"abstract":[{"type":"text","text":"Send an element to an awaiting iteration. This function will resume when the next call to "},{"type":"codeVoice","code":"next()"},{"type":"text","text":" is made"},{"type":"text","text":" "},{"type":"text","text":"or when a call to "},{"type":"codeVoice","code":"finish()"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"fail(_:)"},{"type":"text","text":" is made from another Task."},{"type":"text","text":" "},{"type":"text","text":"If the channel is already finished then this returns immediately"}],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncThrowingChannel\/send(_:)","kind":"symbol","type":"topic","url":"\/documentation\/asyncalgorithms\/asyncthrowingchannel\/send(_:)"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/AsyncThrowingChannel/fail(_:)":{"role":"symbol","title":"fail(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"fail"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Send an error to all awaiting iterations."},{"type":"text","text":" "},{"type":"text","text":"All subsequent calls to "},{"type":"codeVoice","code":"next(_:)"},{"type":"text","text":" will resume immediately."}],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncThrowingChannel\/fail(_:)","kind":"symbol","type":"topic","url":"\/documentation\/asyncalgorithms\/asyncthrowingchannel\/fail(_:)"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/AsyncThrowingChannel/init(_:)":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:15AsyncAlgorithms0A15ThrowingChannelC7Elementxmfp"},{"kind":"text","text":".Type)"}],"abstract":[],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncThrowingChannel\/init(_:)","kind":"symbol","type":"topic","url":"\/documentation\/asyncalgorithms\/asyncthrowingchannel\/init(_:)"},"doc://org.swift.AsyncAlgorithms/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/org.swift.AsyncAlgorithms\/s8SendableP"},"doc://org.swift.AsyncAlgorithms/Sci":{"type":"unresolvable","title":"_Concurrency.AsyncSequence","identifier":"doc:\/\/org.swift.AsyncAlgorithms\/Sci"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/AsyncThrowingChannel/finish()":{"role":"symbol","title":"finish()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"finish"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Send a finish to all awaiting iterations."},{"type":"text","text":" "},{"type":"text","text":"All subsequent calls to "},{"type":"codeVoice","code":"next(_:)"},{"type":"text","text":" will resume immediately."}],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncThrowingChannel\/finish()","kind":"symbol","type":"topic","url":"\/documentation\/asyncalgorithms\/asyncthrowingchannel\/finish()"}}}