{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Combines the latest values produced from two or more asynchronous sequences into an asynchronous sequence of tuples."}]},{"type":"codeListing","syntax":"swift","code":["let appleFeed = URL(string: \"http:\/\/www.example.com\/ticker?symbol=AAPL\")!.lines","let nasdaqFeed = URL(string: \"http:\/\/www.example.com\/ticker?symbol=^IXIC\")!.lines","","for try await (apple, nasdaq) in zip(appleFeed, nasdaqFeed) {","  print(\"APPL: \\(apple) NASDAQ: \\(nasdaq)\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Given some sample inputs the following zipped events can be expected."}]},{"type":"table","rows":[[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Timestamp"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"appleFeed"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"nasdaqFeed"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"combined output"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"11:40 AM"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"173.91"}]}],[{"type":"paragraph","inlineContent":[]}],[{"type":"paragraph","inlineContent":[]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"12:25 AM"}]}],[{"type":"paragraph","inlineContent":[]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"14236.78"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"AAPL: 173.91 NASDAQ: 14236.78"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"12:40 AM"}]}],[{"type":"paragraph","inlineContent":[]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"14218.34"}]}],[{"type":"paragraph","inlineContent":[]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"1:15 PM"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"173.00"}]}],[{"type":"paragraph","inlineContent":[]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"AAPL: 173.00 NASDAQ: 14218.34"}]}]]],"header":"row"},{"anchor":"Detailed-Design","level":2,"type":"heading","text":"Detailed Design"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function family and the associated family of return types are prime candidates for variadic generics. Until that proposal is accepted, these will be implemented in terms of two- and three-base sequence cases."}]},{"type":"codeListing","syntax":"swift","code":["public func zip<Base1: AsyncSequence, Base2: AsyncSequence>(_ base1: Base1, _ base2: Base2) -> AsyncZip2Sequence<Base1, Base2>","","public func zip<Base1: AsyncSequence, Base2: AsyncSequence, Base3: AsyncSequence>(_ base1: Base1, _ base2: Base2, _ base3: Base3) -> AsyncZip3Sequence<Base1, Base2, Base3>","","public struct AsyncZip2Sequence<Base1: AsyncSequence, Base2: AsyncSequence>: Sendable","  where","    Base1: Sendable, Base2: Sendable,","    Base1.Element: Sendable, Base2.Element: Sendable,","    Base1.AsyncIterator: Sendable, Base2.AsyncIterator: Sendable {","  public typealias Element = (Base1.Element, Base2.Element)","","  public struct Iterator: AsyncIteratorProtocol {","    public mutating func next() async rethrows -> Element?","  }","","  public func makeAsyncIterator() -> Iterator","}","","public struct AsyncZip3Sequence<Base1: AsyncSequence, Base2: AsyncSequence, Base3: AsyncSequence>: Sendable","  where","    Base1: Sendable, Base2: Sendable, Base3: Sendable","    Base1.Element: Sendable, Base2.Element: Sendable, Base3.Element: Sendable","    Base1.AsyncIterator: Sendable, Base2.AsyncIterator: Sendable, Base3.AsyncIterator: Sendable {","  public typealias Element = (Base1.Element, Base2.Element, Base3.Element)","","  public struct Iterator: AsyncIteratorProtocol {","    public mutating func next() async rethrows -> Element?","  }","","  public func makeAsyncIterator() -> Iterator","}",""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"zip(_:...)"},{"type":"text","text":" function takes two or more asynchronous sequences as arguments with the resulting "},{"type":"codeVoice","code":"AsyncZipSequence"},{"type":"text","text":" which is an asynchronous sequence."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each iteration of an "},{"type":"codeVoice","code":"AsyncZipSequence"},{"type":"text","text":" will await for all base iterators to produce a value. This iteration will be done concurrently to produce a singular tuple result. If any of the base iterations terminates by returning "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" from its iteration, the "},{"type":"codeVoice","code":"AsyncZipSequence"},{"type":"text","text":" iteration is immediately considered unsatisfiable and returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" and all iterations of other bases will be cancelled. If any iteration of the bases throws an error, then the other iterations concurrently running are cancelled and the produced error is rethrown, terminating the iteration."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"AsyncZipSequence"},{"type":"text","text":" requires that the iterations are done concurrently. This means that the base sequences, their elements, and iterators must all be "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":". That makes "},{"type":"codeVoice","code":"AsyncZipSequence"},{"type":"text","text":" inherently "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The source of throwing of "},{"type":"codeVoice","code":"AsyncZipSequence"},{"type":"text","text":" is determined by its bases. That means that if any base can throw an error then the iteration of the "},{"type":"codeVoice","code":"AsyncZipSequence"},{"type":"text","text":" can throw. If no bases can throw, then the "},{"type":"codeVoice","code":"AsyncZipSequence"},{"type":"text","text":" does not throw."}]},{"anchor":"Naming","level":3,"type":"heading","text":"Naming"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"zip(_:...)"},{"type":"text","text":" function takes its name from the Swift standard library function of the same name. The "},{"type":"codeVoice","code":"AsyncZipSequence"},{"type":"text","text":" family of types take their name from the same family from the standard library for the type returned by "},{"type":"codeVoice","code":"zip(_:_:)"},{"type":"text","text":". The one difference is that this asynchronous version allows for the affordance of recognizing the eventual variadic generic need of expanding a zip of more than just two sources."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is common in some libraries to have a "},{"type":"codeVoice","code":"ZipMap"},{"type":"text","text":" or some other combination of "},{"type":"codeVoice","code":"zip"},{"type":"text","text":" and "},{"type":"codeVoice","code":"map"},{"type":"text","text":". This is a common usage pattern, but leaving a singular type for composition feels considerably more approachable."}]},{"anchor":"Comparison-with-other-libraries","level":3,"type":"heading","text":"Comparison with other libraries"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Swift"}]},{"type":"text","text":" The swift standard library has an "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1541125-zip"},{"type":"text","text":" as a top level function for combining two sequences."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"ReactiveX"}]},{"type":"text","text":" ReactiveX has an "},{"type":"reference","isActive":true,"identifier":"https:\/\/reactivex.io\/documentation\/operators\/zip.html"},{"type":"text","text":" as a top level function for combining Observables."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Combine"}]},{"type":"text","text":" Combine has an "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/combine\/publisher\/zip(_:)\/"},{"type":"text","text":" as an operator style method for combining Publishers."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/asyncalgorithms\/zip"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Zip","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"["},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/AsyncZip2Sequence.swift"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/AsyncZip3Sequence.swift"},{"type":"text","text":" |"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Tests\/AsyncAlgorithmsTests\/TestZip.swift"},{"type":"text","text":"]"}],"kind":"article","metadata":{"roleHeading":"Article","title":"Zip","role":"article","modules":[{"name":"AsyncAlgorithms"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms"]]},"seeAlsoSections":[{"title":"Getting Started","identifiers":["doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AdjacentPairs","doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/BufferedBytes","doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Chain","doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Channel","doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Chunked","doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Collections","doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/CombineLatest","doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Compacted","doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Debounce","doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Intersperse","doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Joined","doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Lazy","doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Merge","doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Reductions","doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/RemoveDuplicates","doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Select","doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Throttle","doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Timer"],"generated":true}],"references":{"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/Throttle":{"role":"article","title":"Throttle","abstract":[],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Throttle","kind":"article","type":"topic","url":"\/documentation\/asyncalgorithms\/throttle"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/Select":{"role":"article","title":"Task.select","abstract":[],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Select","kind":"article","type":"topic","url":"\/documentation\/asyncalgorithms\/select"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/Debounce":{"role":"article","title":"Debounce","abstract":[],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Debounce","kind":"article","type":"topic","url":"\/documentation\/asyncalgorithms\/debounce"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/Compacted":{"role":"article","title":"Compacted","abstract":[],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Compacted","kind":"article","type":"topic","url":"\/documentation\/asyncalgorithms\/compacted"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/Timer":{"role":"article","title":"Timer","abstract":[],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Timer","kind":"article","type":"topic","url":"\/documentation\/asyncalgorithms\/timer"},"https://github.com/apple/swift-async-algorithms/blob/main/Tests/AsyncAlgorithmsTests/TestChain.swift":{"title":"Tests","titleInlineContent":[{"type":"text","text":"Tests"}],"type":"link","identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Tests\/AsyncAlgorithmsTests\/TestChain.swift","url":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Tests\/AsyncAlgorithmsTests\/TestChain.swift"},"https://github.com/apple/swift-async-algorithms/blob/main/Sources/AsyncAlgorithms/AsyncLazySequence.swift":{"title":"Source","titleInlineContent":[{"type":"text","text":"Source"}],"type":"link","identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/AsyncLazySequence.swift","url":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/AsyncLazySequence.swift"},"https://reactivex.io/documentation/operators/zip.html":{"title":"API definition of Zip","titleInlineContent":[{"type":"text","text":"API definition of Zip"}],"type":"link","identifier":"https:\/\/reactivex.io\/documentation\/operators\/zip.html","url":"https:\/\/reactivex.io\/documentation\/operators\/zip.html"},"https://github.com/apple/swift-async-algorithms/blob/main/Tests/AsyncAlgorithmsTests/TestInterspersed.swift":{"title":"Tests","titleInlineContent":[{"type":"text","text":"Tests"}],"type":"link","identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Tests\/AsyncAlgorithmsTests\/TestInterspersed.swift","url":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Tests\/AsyncAlgorithmsTests\/TestInterspersed.swift"},"https://github.com/apple/swift-async-algorithms/blob/main/Sources/AsyncAlgorithms/AsyncCombineLatest3Sequence.swift":{"title":"Source","titleInlineContent":[{"type":"text","text":"Source"}],"type":"link","identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/AsyncCombineLatest3Sequence.swift","url":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/AsyncCombineLatest3Sequence.swift"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/Merge":{"role":"article","title":"Merge","abstract":[{"type":"text","text":"["},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/Asyncmerge2Sequence.swift"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/AsyncMerge3Sequence.swift"},{"type":"text","text":" |"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Tests\/AsyncAlgorithmsTests\/TestMerge.swift"},{"type":"text","text":"]"}],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Merge","kind":"article","type":"topic","url":"\/documentation\/asyncalgorithms\/merge"},"https://github.com/apple/swift-async-algorithms/blob/main/Sources/AsyncAlgorithms/AsyncInterspersedSequence.swift":{"title":"Source","titleInlineContent":[{"type":"text","text":"Source"}],"type":"link","identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/AsyncInterspersedSequence.swift","url":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/AsyncInterspersedSequence.swift"},"https://github.com/apple/swift-async-algorithms/blob/main/Tests/AsyncAlgorithmsTests/TestBufferedByteIterator.swift":{"title":"Tests","titleInlineContent":[{"type":"text","text":"Tests"}],"type":"link","identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Tests\/AsyncAlgorithmsTests\/TestBufferedByteIterator.swift","url":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Tests\/AsyncAlgorithmsTests\/TestBufferedByteIterator.swift"},"https://developer.apple.com/documentation/combine/publisher/zip(_:)/":{"title":"API definition of zip","titleInlineContent":[{"type":"text","text":"API definition of zip"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/combine\/publisher\/zip(_:)\/","url":"https:\/\/developer.apple.com\/documentation\/combine\/publisher\/zip(_:)\/"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/Channel":{"role":"article","title":"Channel","abstract":[],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Channel","kind":"article","type":"topic","url":"\/documentation\/asyncalgorithms\/channel"},"https://github.com/apple/swift-async-algorithms/blob/main/Sources/AsyncAlgorithms/AsyncMerge3Sequence.swift":{"title":"Source","titleInlineContent":[{"type":"text","text":"Source"}],"type":"link","identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/AsyncMerge3Sequence.swift","url":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/AsyncMerge3Sequence.swift"},"https://github.com/apple/swift-async-algorithms/blob/main/Sources/AsyncAlgorithms/AsyncBufferedByteIterator.swift":{"title":"Source","titleInlineContent":[{"type":"text","text":"Source"}],"type":"link","identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/AsyncBufferedByteIterator.swift","url":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/AsyncBufferedByteIterator.swift"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/Collections":{"role":"article","title":"Collection Initializers","abstract":[],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Collections","kind":"article","type":"topic","url":"\/documentation\/asyncalgorithms\/collections"},"https://github.com/apple/swift-async-algorithms/blob/main/Sources/AsyncAlgorithms/AsyncChain2Sequence.swift":{"title":"Source","titleInlineContent":[{"type":"text","text":"Source"}],"type":"link","identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/AsyncChain2Sequence.swift","url":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/AsyncChain2Sequence.swift"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/BufferedBytes":{"role":"article","title":"AsyncBufferedByteIterator","abstract":[{"type":"text","text":"["},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/AsyncBufferedByteIterator.swift"},{"type":"text","text":" |"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Tests\/AsyncAlgorithmsTests\/TestBufferedByteIterator.swift"},{"type":"text","text":"]"}],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/BufferedBytes","kind":"article","type":"topic","url":"\/documentation\/asyncalgorithms\/bufferedbytes"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/Joined":{"role":"article","title":"Joined","abstract":[],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Joined","kind":"article","type":"topic","url":"\/documentation\/asyncalgorithms\/joined"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/Lazy":{"role":"article","title":"AsyncLazySequence","abstract":[{"type":"text","text":"["},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/AsyncLazySequence.swift"},{"type":"text","text":" |"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Tests\/AsyncAlgorithmsTests\/TestLazy.swift"},{"type":"text","text":"]"}],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Lazy","kind":"article","type":"topic","url":"\/documentation\/asyncalgorithms\/lazy"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/Intersperse":{"role":"article","title":"Intersperse","abstract":[{"type":"text","text":"["},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/AsyncInterspersedSequence.swift"},{"type":"text","text":" |"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Tests\/AsyncAlgorithmsTests\/TestInterspersed.swift"},{"type":"text","text":"]"}],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Intersperse","kind":"article","type":"topic","url":"\/documentation\/asyncalgorithms\/intersperse"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms":{"role":"collection","title":"AsyncAlgorithms","abstract":[{"type":"strong","inlineContent":[{"type":"text","text":"Swift Async Algorithms"}]},{"type":"text","text":" is an open-source package of asynchronous sequence and advanced algorithms that involve concurrency, along with their related types."}],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms","kind":"symbol","type":"topic","url":"\/documentation\/asyncalgorithms"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/Chain":{"role":"article","title":"Chain","abstract":[{"type":"text","text":"["},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/AsyncChain2Sequence.swift"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/AsyncChain3Sequence.swift"},{"type":"text","text":" |"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Tests\/AsyncAlgorithmsTests\/TestChain.swift"},{"type":"text","text":"]"}],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Chain","kind":"article","type":"topic","url":"\/documentation\/asyncalgorithms\/chain"},"https://github.com/apple/swift-async-algorithms/blob/main/Tests/AsyncAlgorithmsTests/TestCombineLatest.swift":{"title":"Tests","titleInlineContent":[{"type":"text","text":"Tests"}],"type":"link","identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Tests\/AsyncAlgorithmsTests\/TestCombineLatest.swift","url":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Tests\/AsyncAlgorithmsTests\/TestCombineLatest.swift"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/CombineLatest":{"role":"article","title":"Combine Latest","abstract":[{"type":"text","text":"["},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/AsyncCombineLatest2Sequence.swift"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/AsyncCombineLatest3Sequence.swift"},{"type":"text","text":" |"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Tests\/AsyncAlgorithmsTests\/TestCombineLatest.swift"},{"type":"text","text":"]"}],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/CombineLatest","kind":"article","type":"topic","url":"\/documentation\/asyncalgorithms\/combinelatest"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/Chunked":{"role":"article","title":"Chunked","abstract":[],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Chunked","kind":"article","type":"topic","url":"\/documentation\/asyncalgorithms\/chunked"},"https://github.com/apple/swift-async-algorithms/blob/main/Tests/AsyncAlgorithmsTests/TestMerge.swift":{"title":"Tests","titleInlineContent":[{"type":"text","text":"Tests"}],"type":"link","identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Tests\/AsyncAlgorithmsTests\/TestMerge.swift","url":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Tests\/AsyncAlgorithmsTests\/TestMerge.swift"},"https://github.com/apple/swift-async-algorithms/blob/main/Sources/AsyncAlgorithms/Asyncmerge2Sequence.swift":{"title":"Source","titleInlineContent":[{"type":"text","text":"Source"}],"type":"link","identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/Asyncmerge2Sequence.swift","url":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/Asyncmerge2Sequence.swift"},"https://github.com/apple/swift-async-algorithms/blob/main/Sources/AsyncAlgorithms/AsyncChain3Sequence.swift":{"title":"Source","titleInlineContent":[{"type":"text","text":"Source"}],"type":"link","identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/AsyncChain3Sequence.swift","url":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/AsyncChain3Sequence.swift"},"https://developer.apple.com/documentation/swift/1541125-zip":{"title":"API definition of zip","titleInlineContent":[{"type":"text","text":"API definition of zip"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1541125-zip","url":"https:\/\/developer.apple.com\/documentation\/swift\/1541125-zip"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/RemoveDuplicates":{"role":"article","title":"RemoveDuplicates","abstract":[],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/RemoveDuplicates","kind":"article","type":"topic","url":"\/documentation\/asyncalgorithms\/removeduplicates"},"https://github.com/apple/swift-async-algorithms/blob/main/Tests/AsyncAlgorithmsTests/TestLazy.swift":{"title":"Tests","titleInlineContent":[{"type":"text","text":"Tests"}],"type":"link","identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Tests\/AsyncAlgorithmsTests\/TestLazy.swift","url":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Tests\/AsyncAlgorithmsTests\/TestLazy.swift"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/AdjacentPairs":{"role":"article","title":"AdjacentPairs","abstract":[],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AdjacentPairs","kind":"article","type":"topic","url":"\/documentation\/asyncalgorithms\/adjacentpairs"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/Reductions":{"role":"article","title":"Reductions","abstract":[],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/Reductions","kind":"article","type":"topic","url":"\/documentation\/asyncalgorithms\/reductions"},"https://github.com/apple/swift-async-algorithms/blob/main/Sources/AsyncAlgorithms/AsyncCombineLatest2Sequence.swift":{"title":"Source","titleInlineContent":[{"type":"text","text":"Source"}],"type":"link","identifier":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/AsyncCombineLatest2Sequence.swift","url":"https:\/\/github.com\/apple\/swift-async-algorithms\/blob\/main\/Sources\/AsyncAlgorithms\/AsyncCombineLatest2Sequence.swift"}}}