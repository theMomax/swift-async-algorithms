{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncChannel"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Element"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Sendable","preciseIdentifier":"s:s8SendableP"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"AsyncChannel"},{"type":"text","text":" class is intended to be used as a communication type between tasks,"},{"type":"text","text":" "},{"type":"text","text":"particularly when one task produces values and another task consumes those values. The back"},{"type":"text","text":" "},{"type":"text","text":"pressure applied by "},{"type":"codeVoice","code":"send(_:)"},{"type":"text","text":" via the suspension\/resume ensures that"},{"type":"text","text":" "},{"type":"text","text":"the production of values does not exceed the consumption of values from iteration. This method"},{"type":"text","text":" "},{"type":"text","text":"suspends after enqueuing the event and is resumed when the next call to "},{"type":"codeVoice","code":"next()"},{"type":"text","text":" "},{"type":"text","text":"on the "},{"type":"codeVoice","code":"Iterator"},{"type":"text","text":" is made, or when "},{"type":"codeVoice","code":"finish()"},{"type":"text","text":" is called from another Task."},{"type":"text","text":" "},{"type":"text","text":"As "},{"type":"codeVoice","code":"finish()"},{"type":"text","text":" induces a terminal state, there is no need for a back pressure management."},{"type":"text","text":" "},{"type":"text","text":"This function does not suspend and will finish all the pending iterations."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/asyncalgorithms\/asyncchannel"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/org.swift.AsyncAlgorithms\/s8SendableP","doc:\/\/org.swift.AsyncAlgorithms\/Sci"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncChannel","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A channel for sending elements from one task to another with back pressure."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncChannel"}],"title":"AsyncChannel","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:15AsyncAlgorithms0A7ChannelC","modules":[{"name":"AsyncAlgorithms"}],"navigatorTitle":[{"kind":"identifier","text":"AsyncChannel"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms"]]},"topicSections":[{"title":"Structures","identifiers":["doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncChannel\/Iterator"]},{"title":"Initializers","identifiers":["doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncChannel\/init(element:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncChannel\/finish()","doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncChannel\/makeAsyncIterator()","doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncChannel\/send(_:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncChannel\/AsyncSequence-Implementations","doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncChannel\/AsyncSequence-Implementations"],"generated":true}],"references":{"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/AsyncChannel":{"role":"symbol","title":"AsyncChannel","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncChannel"}],"abstract":[{"type":"text","text":"A channel for sending elements from one task to another with back pressure."}],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncChannel","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AsyncChannel"}],"url":"\/documentation\/asyncalgorithms\/asyncchannel"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/AsyncChannel/init(element:)":{"role":"symbol","title":"init(element:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"element"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:15AsyncAlgorithms0A7ChannelC7Elementxmfp"},{"kind":"text","text":".Type)"}],"abstract":[{"type":"text","text":"Create a new "},{"type":"codeVoice","code":"AsyncChannel"},{"type":"text","text":" given an element type."}],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncChannel\/init(element:)","kind":"symbol","type":"topic","url":"\/documentation\/asyncalgorithms\/asyncchannel\/init(element:)"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms":{"role":"collection","title":"AsyncAlgorithms","abstract":[{"type":"strong","inlineContent":[{"type":"text","text":"Swift Async Algorithms"}]},{"type":"text","text":" is an open-source package of asynchronous sequence and advanced algorithms that involve concurrency, along with their related types."}],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms","kind":"symbol","type":"topic","url":"\/documentation\/asyncalgorithms"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/AsyncChannel/makeAsyncIterator()":{"role":"symbol","title":"makeAsyncIterator()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"makeAsyncIterator"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Iterator","preciseIdentifier":"s:15AsyncAlgorithms0A7ChannelC8IteratorV"}],"abstract":[{"type":"text","text":"Create an "},{"type":"codeVoice","code":"Iterator"},{"type":"text","text":" for iteration of an "},{"type":"codeVoice","code":"AsyncChannel"}],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncChannel\/makeAsyncIterator()","kind":"symbol","type":"topic","url":"\/documentation\/asyncalgorithms\/asyncchannel\/makeasynciterator()"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/AsyncChannel/send(_:)":{"role":"symbol","title":"send(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:15AsyncAlgorithms0A7ChannelC7Elementxmfp"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"abstract":[{"type":"text","text":"Send an element to an awaiting iteration. This function will resume when the next call to "},{"type":"codeVoice","code":"next()"},{"type":"text","text":" is made"},{"type":"text","text":" "},{"type":"text","text":"or when a call to "},{"type":"codeVoice","code":"finish()"},{"type":"text","text":" is made from another Task."},{"type":"text","text":" "},{"type":"text","text":"If the channel is already finished then this returns immediately"}],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncChannel\/send(_:)","kind":"symbol","type":"topic","url":"\/documentation\/asyncalgorithms\/asyncchannel\/send(_:)"},"doc://org.swift.AsyncAlgorithms/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/org.swift.AsyncAlgorithms\/s8SendableP"},"doc://org.swift.AsyncAlgorithms/Sci":{"type":"unresolvable","title":"_Concurrency.AsyncSequence","identifier":"doc:\/\/org.swift.AsyncAlgorithms\/Sci"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/AsyncChannel/Iterator":{"role":"symbol","title":"AsyncChannel.Iterator","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Iterator"}],"abstract":[{"type":"text","text":"The iterator for a "},{"type":"codeVoice","code":"AsyncChannel"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncChannel\/Iterator","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Iterator"}],"url":"\/documentation\/asyncalgorithms\/asyncchannel\/iterator"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/AsyncChannel/finish()":{"role":"symbol","title":"finish()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"finish"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Send a finish to all awaiting iterations."},{"type":"text","text":" "},{"type":"text","text":"All subsequent calls to "},{"type":"codeVoice","code":"next(_:)"},{"type":"text","text":" will resume immediately."}],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncChannel\/finish()","kind":"symbol","type":"topic","url":"\/documentation\/asyncalgorithms\/asyncchannel\/finish()"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/AsyncChannel/AsyncSequence-Implementations":{"role":"collectionGroup","title":"AsyncSequence Implementations","abstract":[],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncChannel\/AsyncSequence-Implementations","kind":"article","type":"topic","url":"\/documentation\/asyncalgorithms\/asyncchannel\/asyncsequence-implementations"}}}