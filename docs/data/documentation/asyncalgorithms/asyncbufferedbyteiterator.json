{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncBufferedByteIterator"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Bytes are read into an internal buffer of "},{"type":"codeVoice","code":"capacity"},{"type":"text","text":" bytes via the"},{"type":"text","text":" "},{"type":"codeVoice","code":"readFunction"},{"type":"text","text":". Invoking "},{"type":"codeVoice","code":"next()"},{"type":"text","text":" returns bytes from the internal buffer until itâ€™s"},{"type":"text","text":" "},{"type":"text","text":"empty, and then suspends and awaits another invocation of "},{"type":"codeVoice","code":"readFunction"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"refill. If "},{"type":"codeVoice","code":"readFunction"},{"type":"text","text":" returns 0 (indicating nothing was read), "},{"type":"codeVoice","code":"next()"},{"type":"text","text":" will"},{"type":"text","text":" "},{"type":"text","text":"return "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" from then on. Cancellation is checked before each invocation of"},{"type":"text","text":" "},{"type":"codeVoice","code":"readFunction"},{"type":"text","text":", which means that many calls to "},{"type":"codeVoice","code":"next()"},{"type":"text","text":" will not check for"},{"type":"text","text":" "},{"type":"text","text":"cancellation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A typical use of "},{"type":"codeVoice","code":"AsyncBufferedByteIterator"},{"type":"text","text":" looks something like this:"}]},{"type":"codeListing","syntax":null,"code":["struct AsyncBytes: AsyncSequence {","  public typealias Element = UInt8","  var handle: ReadableThing","","  internal init(_ readable: ReadableThing) {","    handle = readable","  }","","  public func makeAsyncIterator() -> AsyncBufferedByteIterator {","    return AsyncBufferedByteIterator(capacity: 16384) { buffer in","      \/\/ This runs once every 16384 invocations of next()","      return try await handle.read(into: buffer)","    }","  }","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/asyncalgorithms\/asyncbufferedbyteiterator"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/org.swift.AsyncAlgorithms\/s8SendableP","doc:\/\/org.swift.AsyncAlgorithms\/ScI"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncBufferedByteIterator","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"An "},{"type":"codeVoice","code":"AsyncIterator"},{"type":"text","text":" that provides a convenient and high-performance implementation"},{"type":"text","text":" "},{"type":"text","text":"of a common architecture for "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" of "},{"type":"codeVoice","code":"UInt8"},{"type":"text","text":", otherwise known as byte streams."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncBufferedByteIterator"}],"title":"AsyncBufferedByteIterator","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:15AsyncAlgorithms0A20BufferedByteIteratorV","modules":[{"name":"AsyncAlgorithms"}],"navigatorTitle":[{"kind":"identifier","text":"AsyncBufferedByteIterator"}]},"hierarchy":{"paths":[["doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncBufferedByteIterator\/init(capacity:readFunction:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncBufferedByteIterator\/next()"]},{"title":"Type Aliases","identifiers":["doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncBufferedByteIterator\/Element"]}],"references":{"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms":{"role":"collection","title":"AsyncAlgorithms","abstract":[{"type":"strong","inlineContent":[{"type":"text","text":"Swift Async Algorithms"}]},{"type":"text","text":" is an open-source package of asynchronous sequence and advanced algorithms that involve concurrency, along with their related types."}],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms","kind":"symbol","type":"topic","url":"\/documentation\/asyncalgorithms"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/AsyncBufferedByteIterator/Element":{"role":"symbol","title":"AsyncBufferedByteIterator.Element","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Element"}],"abstract":[],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncBufferedByteIterator\/Element","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Element"}],"url":"\/documentation\/asyncalgorithms\/asyncbufferedbyteiterator\/element"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/AsyncBufferedByteIterator":{"role":"symbol","title":"AsyncBufferedByteIterator","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncBufferedByteIterator"}],"abstract":[{"type":"text","text":"An "},{"type":"codeVoice","code":"AsyncIterator"},{"type":"text","text":" that provides a convenient and high-performance implementation"},{"type":"text","text":" "},{"type":"text","text":"of a common architecture for "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":" of "},{"type":"codeVoice","code":"UInt8"},{"type":"text","text":", otherwise known as byte streams."}],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncBufferedByteIterator","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AsyncBufferedByteIterator"}],"url":"\/documentation\/asyncalgorithms\/asyncbufferedbyteiterator"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/AsyncBufferedByteIterator/init(capacity:readFunction:)":{"role":"symbol","title":"init(capacity:readFunction:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"capacity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"readFunction"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer","preciseIdentifier":"s:Sw"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates an asynchronous buffered byte iterator with a specified capacity and read function."}],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncBufferedByteIterator\/init(capacity:readFunction:)","kind":"symbol","type":"topic","url":"\/documentation\/asyncalgorithms\/asyncbufferedbyteiterator\/init(capacity:readfunction:)"},"doc://org.swift.AsyncAlgorithms/documentation/AsyncAlgorithms/AsyncBufferedByteIterator/next()":{"role":"symbol","title":"next()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"next"},{"kind":"text","text":"() "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"UInt8","preciseIdentifier":"s:s5UInt8V"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Reads a byte out of the buffer if available. When no bytes are available, this will trigger"},{"type":"text","text":" "},{"type":"text","text":"the read function to reload the buffer and then return the next byte from that buffer."}],"identifier":"doc:\/\/org.swift.AsyncAlgorithms\/documentation\/AsyncAlgorithms\/AsyncBufferedByteIterator\/next()","kind":"symbol","type":"topic","url":"\/documentation\/asyncalgorithms\/asyncbufferedbyteiterator\/next()"},"doc://org.swift.AsyncAlgorithms/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/org.swift.AsyncAlgorithms\/s8SendableP"},"doc://org.swift.AsyncAlgorithms/ScI":{"type":"unresolvable","title":"_Concurrency.AsyncIteratorProtocol","identifier":"doc:\/\/org.swift.AsyncAlgorithms\/ScI"}}}